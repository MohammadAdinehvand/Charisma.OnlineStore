// <auto-generated />
using System;
using Charisma.OnlineStore.Infrastructure.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Charisma.OnlineStore.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(OnlineStoreContext))]
    [Migration("20241121210633_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Charisma.OnlineStore.Domain.Models.BuyerAggregate.Buyer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Buyer", (string)null);
                });

            modelBuilder.Entity("Charisma.OnlineStore.Domain.Models.DiscountAggregate.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("_active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("_discountType")
                        .HasColumnType("int")
                        .HasColumnName("DiscountType");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Title");

                    b.Property<decimal>("_value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("Charisma.OnlineStore.Domain.Models.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<decimal>("_totalDiscount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalDiscount")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Charisma.OnlineStore.Domain.Models.ProductAggregate.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Charisma.OnlineStore.Domain.Models.ProfitAggregate.Profit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("_active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<decimal>("_fixedAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("FixedAmount");

                    b.Property<string>("_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Profit", (string)null);
                });

            modelBuilder.Entity("Charisma.OnlineStore.Domain.Models.OrderAggregate.Order", b =>
                {
                    b.HasOne("Charisma.OnlineStore.Domain.Models.BuyerAggregate.Buyer", null)
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.OwnsMany("Charisma.OnlineStore.Domain.Models.OrderAggregate.OrderItem", "OrderItems", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<long>("Id"));

                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<long>("ProductId")
                                .HasColumnType("bigint");

                            b1.Property<string>("_productName")
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ProductName");

                            b1.Property<decimal>("_profitMargin")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ProfitMargin");

                            b1.Property<decimal>("_unitPrice")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPrice");

                            b1.Property<int>("_units")
                                .HasColumnType("int")
                                .HasColumnName("Units");

                            b1.HasKey("Id");

                            b1.HasIndex("OrderId");

                            b1.HasIndex("ProductId");

                            b1.ToTable("OrderItem", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.HasOne("Charisma.OnlineStore.Domain.Models.ProductAggregate.Product", null)
                                .WithMany()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Charisma.OnlineStore.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City")
                                .HasColumnOrder(7);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Country")
                                .HasColumnOrder(5);

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("State")
                                .HasColumnOrder(6);

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Street")
                                .HasColumnOrder(8);

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ZipCode")
                                .HasColumnOrder(9);

                            b1.HasKey("OrderId");

                            b1.ToTable("Order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
